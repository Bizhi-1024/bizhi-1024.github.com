{"meta":{"title":"Bizhi-1024","subtitle":"","description":"","author":"毕之","url":"https://bizhi-1024.github.io","root":"/"},"pages":[{"title":"about","date":"2021-04-24T12:20:54.000Z","updated":"2021-04-24T12:22:45.197Z","comments":true,"path":"about/index.html","permalink":"https://bizhi-1024.github.io/about/index.html","excerpt":"","text":""},{"title":"books","date":"2021-04-24T14:48:21.000Z","updated":"2021-04-24T14:48:21.822Z","comments":true,"path":"books/index.html","permalink":"https://bizhi-1024.github.io/books/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-04-24T12:21:40.000Z","updated":"2021-04-24T12:23:12.223Z","comments":true,"path":"categories/index.html","permalink":"https://bizhi-1024.github.io/categories/index.html","excerpt":"","text":""},{"title":"links","date":"2021-04-24T14:48:35.000Z","updated":"2021-04-24T14:48:35.510Z","comments":true,"path":"links/index.html","permalink":"https://bizhi-1024.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-04-25T08:27:30.993Z","updated":"2021-04-25T08:27:30.993Z","comments":false,"path":"repository/index.html","permalink":"https://bizhi-1024.github.io/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-04-24T12:20:43.000Z","updated":"2021-04-24T12:23:27.974Z","comments":true,"path":"tags/index.html","permalink":"https://bizhi-1024.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring Cloud教程","slug":"Spring Cloud 第一天课堂笔记","date":"2021-04-25T07:53:44.600Z","updated":"2021-04-25T08:20:20.885Z","comments":true,"path":"2021/04/25/Spring Cloud 第一天课堂笔记/","link":"","permalink":"https://bizhi-1024.github.io/2021/04/25/Spring%20Cloud%20%E7%AC%AC%E4%B8%80%E5%A4%A9%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/","excerpt":"","text":"1. 系统架构演变概述目标：了解项目架构的演变历程 小结： 12345graph LR;1[集中式架构] --&gt; 2[垂直拆分]2 --&gt; 3[分布式服务]3 --&gt; 4[SOA面向服务架构]4 --&gt; 5[微服务架构] 2. 微服务架构说明目标：了解SOA与微服务架构的区别以及说出微服务架构的特点 分析： SOA使用了ESB组件的面向服务架构：ESB自身实现复杂；应用服务粒度较大，所有服务之间的通信都经过ESB会降低通信速度；部署、测试ESB比较麻烦。 小结： 微服务架构：是一套使用小服务或者单一业务来开发单个应用的方式或途径。 微服务架构特点： 单一职责 服务粒度小 面向服务（对外暴露REST api） 服务之间相互独立 与使用ESB的SOA架构的区别：微服务架构没有使用ESB，有服务治理注册中心；业务粒度小。 3. 服务调用方式说明目标：能够说出服务调用方式种类 小结： RPC：基于socket，速度快，效率高；webservice、dubbo HTTP：基于TCP，封装比较臃肿；对服务和调用方没有任何技术、语言的限定，自由灵活；RESTful，Spring Cloud 4. Spring RestTemplate示例工程导入目标：了解Spring RestTemplate的应用 分析： 一般情况下有如下三种http客户端工具类包都可以方便的进行http服务调用： httpClient okHttp JDK原生URLConnection spring 提供了RestTemplate的工具类对上述的3种http客户端工具类进行了封装，可在spring项目中使用RestTemplate进行服务调用。 小结： 12345678910111213141516@RunWith(SpringRunner.class)@SpringBootTestpublic class RestTemplateTest &#123; @Autowired private RestTemplate restTemplate; @Test public void test()&#123; String url = &quot;http://localhost/user/8&quot;; //restTemplate可以对json格式字符串进行反序列化 User user = restTemplate.getForObject(url, User.class); System.out.println(user); &#125;&#125; 5. Spring Cloud概述目标：Spring Cloud整合的组件和版本特征 小结： 整合的组件可以有很多组件；常见的组件有：eureka注册中心，Gateway网关，Ribbon负载均衡，Feign服务调用，Hystrix熔断器。在有需要的时候项目添加对于的启动器依赖即可。 版本特征：以英文单词命名（伦敦地铁站名） 6. 创建微服务工程目标：创建微服务父工程heima-springcloud、用户服务工程user-service、服务消费工程consumer-demo 分析： 需求：查询数据库中的用户数据并输出到浏览器 父工程heima-springcloud：添加spring boot父坐标和管理其它组件的依赖 用户服务工程user-service：整合mybatis查询数据库中用户数据；提供查询用户服务 服务消费工程consumer-demo：利用查询用户服务获取用户数据并输出到浏览器 小结： 123456789&lt;!-- springCloud --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt;&lt;/dependency&gt; 通过 scope 的import可以继承 spring-cloud-dependencies 工程中的依赖 7. 搭建配置user-service工程目标：配置user-service工程并能够根据用户id查询数据库中用户 分析： 需求：可以访问http://localhost:9091/user/8输出用户数据 实现步骤： 添加启动器依赖（web、通用Mapper）； 创建启动引导类和配置文件； 修改配置文件中的参数； 编写测试代码（UserMapper，UserService，UserController）； 测试 小结： 添加启动器依赖 123456789101112131415161718&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 通用Mapper启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- mysql驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 编写配置文件 123456789101112server: port: 9091spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://localhost:3306/springcloud username: root password: rootmybatis: type-aliases-package: com.itheima.user.pojo 8. 搭建配置consumer-demo工程目标：编写测试类使用restTemplate访问user-service的路径根据id查询用户 分析： 需求：访问http://localhost:8080/consumer/8 使用RestTemplate获取http://localhost:9091/user/8的数据 实现步骤： 添加启动器依赖； 创建启动引导类（注册RestTemplate）和配置文件； 编写测试代码（ConsumerController中使用restTemplate访问服务获取数据） 测试 小结： 服务管理如何自动注册和发现如何实现状态监管如何实现动态路由 服务如何实现负载均衡 服务如何解决容灾问题 服务如何实现统一配置 上述的问题都可以通过Spring Cloud的各种组件解决。 9. Eureka注册中心说明目标：说出Eureka的主要功能 小结： Eureka的主要功能是进行服务管理，定期检查服务状态，返回服务地址列表。 10. 搭建eureka-server工程目标：添加eureka对应依赖和编写引导类搭建eureka服务并可访问eureka服务界面 分析： Eureka是服务注册中心，只做服务注册；自身并不提供服务也不消费服务。可以搭建web工程使用Eureka，可以使用Spring Boot方式搭建。 搭建步骤： 创建工程； 添加启动器依赖； 编写启动引导类（添加Eureka的服务注解）和配置文件； 修改配置文件（端口，应用名称…）； 启动测试 小结： 启动器依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;&lt;/dependency&gt; 配置文件 1234567891011121314server: port: 10086spring: application: name: eureka-servereureka: client: service-url: # eureka 服务地址，如果是集群的话；需要指定其它集群eureka地址 defaultZone: http://127.0.0.1:10086/eureka # 不注册自己 register-with-eureka: false # 不拉取服务 fetch-registry: false 11. 服务注册与发现目标：将user-service的服务注册到eureka并在consumer-demo中可以根据服务名称调用 分析： 服务注册：在服务提供工程user-service上添加Eureka客户端依赖；自动将服务注册到EurekaServer服务地址列表。 添加依赖； 改造启动引导类；添加开启Eureka客户端发现的注解； 修改配置文件；设置Eureka 服务地址 服务发现：在服务消费工程consumer-demo上添加Eureka客户端依赖；可以使用工具类根据服务名称获取对应的服务地址列表。 添加依赖； 改造启动引导类；添加开启Eureka客户端发现的注解； 修改配置文件；设置Eureka 服务地址； 改造处理器类ConsumerController，可以使用工具类DiscoveryClient根据服务名称获取对应服务地址列表。 小结： 添加Eureka客户端依赖； 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt; 添加启动引导类注解； 修改配置 1234567spring: application: name: consumer-demoeureka: client: service-url: defaultZone: http://127.0.0.1:10086/eureka 12. Eureka Server高可用配置目标：可以启动两台eureka-server实例；在eureka管理界面看到两个实例 分析： Eureka Server是一个web应用，可以启动多个实例（配置不同端口）保证Eureka Server的高可用。 小结： 高可用配置：将Eureka Server作为一个服务注册到其它Eureka Server，这样多个Eureka Server之间就能够互相发现对方，同步服务，实现Eureka Server集群。 13. Eureka客户端与服务端配置目标：配置eureka客户端user-service的注册、续约等配置项，配置eureka客户端consumer-demo的获取服务间隔时间；了解失效剔除和自我保护 分析： Eureka客户端工程 user-service 服务提供 服务地址使用ip方式 续约 consumer-demo 服务消费 获取服务地址的频率 Eureka服务端工程 eureka-server 失效剔除 自我保护 小结： user-service 12345678910111213eureka: client: service-url: defaultZone: http://127.0.0.1:10086/eureka instance: # 更倾向使用ip地址，而不是host名 prefer-ip-address: true # ip地址 ip-address: 127.0.0.1 # 续约间隔，默认30秒 lease-renewal-interval-in-seconds: 5 # 服务失效时间，默认90秒 lease-expiration-duration-in-seconds: 5 consumer-demo 123456eureka: client: service-url: defaultZone: http://127.0.0.1:10086/eureka # 获取服务地址列表间隔时间，默认30秒 registry-fetch-interval-seconds: 10 eureka-server 123456eureka: server: # 服务失效剔除时间间隔，默认60秒 eviction-interval-timer-in-ms: 60000 # 关闭自我保护模式（默认是打开的） enable-self-preservation: false 14. 负载均衡Ribbon简介目标：描述负载均衡和ribbon的作用 分析： 负载均衡是一个算法，可以通过该算法实现从地址列表中获取一个地址进行服务调用。 在Spring Cloud中提供了负载均衡器：Ribbon 小结： Ribbon提供了轮询、随机两种负载均衡算法（默认是轮询）可以实现从地址列表中使用负载均衡算法获取地址进行服务调用。 15. Ribbon负载均衡应用目标：配置启动两个用户服务，在consumer-demo中使用服务名实现根据用户id获取用户 分析： 需求：可以使用RestTemplate访问http://user-service/user/8获取服务数据。 可以使用Ribbon负载均衡：在执行RestTemplate发送服务地址请求的时候，使用负载均衡拦截器拦截，根据服务名获取服务地址列表，使用Ribbon负载均衡算法从服务地址列表中选择一个服务地址，访问该地址获取服务数据。 实现步骤： 启动多个user-service实例（9091,9092）； 修改RestTemplate实例化方法，添加负载均衡注解； 修改ConsumerController； 测试 小结： 在实例化RestTemplate的时候使用@LoadBalanced，服务地址直接可以使用服务名。 16. 熔断器Hystrix简介目标：了解熔断器Hystrix的作用 小结： Hystrix是一个延迟和容错库，用于隔离访问远程服务，防止出现级联失败。 17. 线程隔离&amp;服务降级目标：了解什么是线程隔离和服务降级 分析： Hystrix解决雪崩效应： 线程隔离：用户请求不直接访问服务，而是使用线程池中空闲的线程访问服务，加速失败判断时间。 服务降级：及时返回服务调用失败的结果，让线程不因为等待服务而阻塞。 小结： consumer-demo中添加依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;&lt;/dependency&gt; 开启熔断 降级逻辑 12345678910111213141516171819202122232425262728293031323334353637@RestController@RequestMapping(&quot;/consumer&quot;)@Slf4j@DefaultProperties(defaultFallback = &quot;defaultFallback&quot;)public class ConsumerController &#123; @Autowired private RestTemplate restTemplate; @Autowired private DiscoveryClient discoveryClient; @GetMapping(&quot;/&#123;id&#125;&quot;) //@HystrixCommand(fallbackMethod = &quot;queryByIdFallback&quot;) @HystrixCommand public String queryById(@PathVariable Long id)&#123; /*String url = &quot;http://localhost:9091/user/&quot;+id; //获取eureka中注册的user-service的实例 List&lt;ServiceInstance&gt; serviceInstances = discoveryClient.getInstances(&quot;user-service&quot;); ServiceInstance serviceInstance = serviceInstances.get(0); url = &quot;http://&quot; + serviceInstance.getHost() + &quot;:&quot; + serviceInstance.getPort() + &quot;/user/&quot; + id;*/ String url = &quot;http://user-service/user/&quot; + id; return restTemplate.getForObject(url, String.class); &#125; public String queryByIdFallback(Long id)&#123; log.error(&quot;查询用户信息失败。id：&#123;&#125;&quot;, id); return &quot;对不起，网络太拥挤了！&quot;; &#125; public String defaultFallback()&#123; return &quot;默认提示：对不起，网络太拥挤了！&quot;; &#125;&#125; 修改超时配置 1234567hystrix: command: default: execution: isolation: thread: timeoutInMilliseconds: 2000 18. 服务熔断演示目标：了解熔断器工作原理 小结： 可以通过配置服务熔断参数修改默认： 1234567891011hystrix: command: default: execution: isolation: thread: timeoutInMilliseconds: 2000 circuitBreaker: errorThresholdPercentage: 50 # 触发熔断错误比例阈值，默认值50% sleepWindowInMilliseconds: 10000 # 熔断后休眠时长，默认值5秒 requestVolumeThreshold: 10 # 熔断触发最小请求次数，默认值是20","categories":[{"name":"spring cloud","slug":"spring-cloud","permalink":"https://bizhi-1024.github.io/categories/spring-cloud/"}],"tags":[{"name":"spring cloud","slug":"spring-cloud","permalink":"https://bizhi-1024.github.io/tags/spring-cloud/"}]},{"title":"wordcount","slug":"wordcount","date":"2021-04-24T15:21:20.508Z","updated":"2021-04-24T15:23:06.266Z","comments":true,"path":"2021/04/24/wordcount/","link":"","permalink":"https://bizhi-1024.github.io/2021/04/24/wordcount/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"html","slug":"html","permalink":"https://bizhi-1024.github.io/categories/html/"}],"tags":[{"name":"html","slug":"html","permalink":"https://bizhi-1024.github.io/tags/html/"}]},{"title":"Hello hexo","slug":"hello-hexo","date":"2021-04-24T14:40:19.331Z","updated":"2021-04-24T14:45:25.421Z","comments":true,"path":"2021/04/24/hello-hexo/","link":"","permalink":"https://bizhi-1024.github.io/2021/04/24/hello-hexo/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"js","slug":"js","permalink":"https://bizhi-1024.github.io/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"https://bizhi-1024.github.io/tags/js/"}]},{"title":"World","slug":"world","date":"2021-04-24T14:40:19.331Z","updated":"2021-04-24T14:45:31.070Z","comments":true,"path":"2021/04/24/world/","link":"","permalink":"https://bizhi-1024.github.io/2021/04/24/world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"html","slug":"html","permalink":"https://bizhi-1024.github.io/categories/html/"}],"tags":[{"name":"html","slug":"html","permalink":"https://bizhi-1024.github.io/tags/html/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-04-24T12:03:16.780Z","updated":"2021-04-24T12:03:16.780Z","comments":true,"path":"2021/04/24/hello-world/","link":"","permalink":"https://bizhi-1024.github.io/2021/04/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"spring cloud","slug":"spring-cloud","permalink":"https://bizhi-1024.github.io/categories/spring-cloud/"},{"name":"html","slug":"html","permalink":"https://bizhi-1024.github.io/categories/html/"},{"name":"js","slug":"js","permalink":"https://bizhi-1024.github.io/categories/js/"}],"tags":[{"name":"spring cloud","slug":"spring-cloud","permalink":"https://bizhi-1024.github.io/tags/spring-cloud/"},{"name":"html","slug":"html","permalink":"https://bizhi-1024.github.io/tags/html/"},{"name":"js","slug":"js","permalink":"https://bizhi-1024.github.io/tags/js/"}]}